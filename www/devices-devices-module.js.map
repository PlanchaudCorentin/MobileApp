{"version":3,"sources":["webpack:///./src/app/device/device.page.html","webpack:///./src/app/device/device.page.scss","webpack:///./src/app/device/device.page.ts","webpack:///./src/app/devices/devices.module.ts","webpack:///./src/app/devices/devices.page.html","webpack:///./src/app/devices/devices.page.scss","webpack:///./src/app/devices/devices.page.ts"],"names":[],"mappings":"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","file":"devices-devices-module.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>{{device.name}}</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n\\n\\n<ion-content>\\n\\n    <ion-item lines=\\\"none\\\">\\n      <ion-label>\\n        Average\\n      </ion-label>\\n      <ion-note color=\\\"primary\\\" slot=\\\"end\\\">50</ion-note>\\n    </ion-item>\\n    \\n    <ion-item>\\n        <ion-label>Send a command</ion-label>\\n        <ion-select value=\\\"command\\\" okText=\\\"Okay\\\" cancelText=\\\"Dismiss\\\">\\n          <ion-select-option value=\\\"0\\\">Change temperature</ion-select-option>\\n          <ion-select-option value=\\\"1\\\">Send signal</ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n\\n    <ion-card>\\n      <ion-card-header>\\n        <ion-card-subtitle>Chart all sensors average</ion-card-subtitle>\\n      </ion-card-header>\\n      <google-chart stye=\\\"padding:30px\\\" *ngIf=\\\"pieChartData\\\" [data]=\\\"pieChartData\\\"></google-chart>\\n    </ion-card>\\n\\n\\n    <ion-list-header color=\\\"\\\">Device sensors</ion-list-header>\\n    <ion-list>\\n      <!--<ion-item button clear *ngFor=\\\"let sensor of sensor\\\" (click)=\\\"itemClicked(sensor)\\\">\\n        {{sensor.name}}\\n      </ion-item>-->\\n      <ion-item button clear *ngFor=\\\"let item of (result | async)\\\" (click)=\\\"itemClicked(item)\\\">\\n          {{item.id}} - {{item.name}}\\n        </ion-item>\\n    </ion-list>\\n\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIuLi9kZXZpY2UvZGV2aWNlLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DevicesService } from '../devices/devices.service'\nimport { SensorsService } from '../sensors/sensor.service'\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Ng2GoogleChartsModule } from 'ng2-google-charts';\nimport { DataService } from '../services/data.service';\n\n\n@Component({\n  selector: 'app-device',\n  templateUrl: './device.page.html',\n  styleUrls: ['./device.page.scss'],\n})\nexport class DevicePage implements OnInit {\n\n  result: Observable<any>;\n  id:string;\n  id_device:string;\n  itemInfo:any;\n  device: { id?: string; name?: string; data: any };\n  sensor2: { id?: string; name?: string; id_device?: string; data: any };\n  sensor: { id?: string; name?: string; id_device?: string; data: any }[];\n\n  constructor(private activatedRoute: ActivatedRoute, public devicesService: DevicesService, private sensorsService: SensorsService, private dataService: DataService, private route: Router) { \n  }\n\n  public sensorslists = this.sensorsService.lists;\n\n  ngOnInit() {\n    this.itemInfo = this.activatedRoute.snapshot.paramMap.get('id');\n    this.device = this.devicesService.lists.find(e => { return e.id === this.itemInfo });\n    this.sensor = this.sensorsService.lists.filter(e => { return e.id_device === this.device.id });\n    this.result = this.dataService.getDeviceById(this.itemInfo);\n  }\n\n  itemClicked(item: any) {\n    this.route.navigateByUrl('/sensors/' + item.id);\n  }\n\n  ionViewDidEnter(){\n    this.useAngularLibrary();\n  }\n  \n\n  pieChartData;\n  dataTable : any[] = [];\n  lines : string[] = [];\n  average:string;\n  \n  /*dataTable = [[\n    'Type', 'Average', 'Sum'\n  ],\n  ['Sensor 1', 12, 13],\n  ['Sensor 2', 15, 13],\n  ['Sensor 3', 16, 32]];\n  \n  useAngularLibrary() {\n    this.pieChartData = {\n      chartType: 'ColumnChart',\n      dataTable: this.dataTable,\n      legend: {\n        position: 'bottom'\n      }\n    };\n  \n  }*/\n\n  useAngularLibrary() {\n    this.lines.push('Type', 'Average');\n    this.dataTable.push(this.lines);\n    this.sensor.forEach(e => {\n      e.data.forEach(i =>{\n        this.dataTable.push(['Sensor ' + (e.id), i.average]);\n      })\n    });\n    this.pieChartData = {\n      chartType: 'ColumnChart',\n      dataTable: this.dataTable,\n      options: {\n        'title': 'Average for all sensors by hours'\n      }\n    };\n  }\n\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { DevicesPage } from './devices.page';\nimport { DevicePage } from '../device/device.page';\n\nimport { Ng2GoogleChartsModule } from 'ng2-google-charts';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DevicesPage\n  }, \n  {\n    path: ':id',\n    component: DevicePage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    Ng2GoogleChartsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [DevicesPage, DevicePage]\n})\nexport class DevicesPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button (ionInput)=\\\"getItems($event)\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>List all devices</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n    <ion-searchbar></ion-searchbar>\\n  <ion-list>\\n    <!--<ion-item button clear *ngFor=\\\"let devicelist of devicelists\\\" (click)=\\\"itemClicked(devicelist)\\\">\\n      {{devicelist.name}}\\n    </ion-item>-->\\n    <ion-item button clear *ngFor=\\\"let item of (result | async)\\\" (click)=\\\"itemClicked(item)\\\">\\n      {{item.name}} - {{item.mac_address}}\\n    </ion-item>\\n  </ion-list>\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIuLi9kZXZpY2VzL2RldmljZXMucGFnZS5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { DevicesService} from './devices.service';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { DataService } from '../services/data.service';\nimport { MsalService } from '../services/msal.service';\n\n\n@Component({\n  selector: 'app-devices',\n  templateUrl: './devices.page.html',\n  styleUrls: ['./devices.page.scss'],\n})\nexport class DevicesPage implements OnInit{\n\n  result: Observable<any>;\n\n  constructor(private dataService: DataService, private route: Router, public data: DevicesService, public msal: MsalService) {\n    this.initializeItems();\n   }\n\n    items;\n    //public devicelists = this.data.lists;\n\n    itemClicked(item: any) {\n      this.route.navigateByUrl('/devices/' + item.id);\n    }\n\n    ngOnInit() {\n      this.result = this.dataService.searchData(this.msal.getUserEmail());\n      console.log('result :' + this.result);\n    }\n\n    initializeItems() {\n        this.items = this.result;\n        console.log(this.items)\n    }\n\n    getItems(ev) {\n      // Reset items back to all of the items\n      this.initializeItems();\n  \n      // set val to the value of the ev target\n      var val = ev.target.value;\n  \n      // if the value is an empty string don't filter the items\n      if (val && val.trim() != '') {\n        this.items = this.items.filter((item) => {\n          return (item.toLowerCase().indexOf(val.toLowerCase()) > -1);\n        })\n      }\n    }\n\n\n\n}\n"],"sourceRoot":""}